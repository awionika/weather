{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","required","Weather","city","className","country","Math","floor","temp","pressure","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","setState","main","sys","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qPAQgBA,G,KANH,kBACT,6BACD,sECMaC,EARH,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,eACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,OAAOC,UAAQ,IAC1D,8CCgBYC,EAhBC,SAAAP,GAAK,OACnB,6BACGA,EAAMQ,MACL,yBAAKC,UAAU,aACb,2BACG,IADH,SAEST,EAAMQ,KAFf,KAEuBR,EAAMU,SAE7B,4CAAkBC,KAAKC,MAAMZ,EAAMa,MAAnC,SACA,yCAAeb,EAAMc,SAArB,OACA,iEAGJ,uBAAGL,UAAU,SAAST,EAAMe,SCX1BC,EAAU,mCAuEDC,E,2MApEbC,MAAQ,CACNL,UAAMM,EACNX,UAAMW,EACNT,aAASS,EACTL,cAAUK,EACVJ,WAAOI,G,EAGTC,e,uCAAiB,WAAMC,GAAN,mBAAAC,EAAA,yDACfD,EAAEE,mBACEf,EAAOa,EAAEG,OAAOC,SAASjB,KAAKkB,OAFnB,iCAKSC,MAAM,qDAAD,OAC4BnB,EAD5B,kBAC0CQ,EAD1C,kBALd,cAKPY,EALO,gBAQMA,EAAQC,OARd,OAQPC,EARO,OAgBb,EAAKC,SAAS,CACZlB,KAAMiB,EAAKE,KAAKnB,KAChBL,KAAMsB,EAAK1B,KACXM,QAASoB,EAAKG,IAAIvB,QAClBI,SAAUgB,EAAKE,KAAKlB,SACpBC,WAAOI,IArBI,wBAwBb,EAAKY,SAAS,CACZlB,UAAMM,EACNX,UAAMW,EACNT,aAASS,EACTL,cAAUK,EACVJ,MAAO,2BA7BI,4C,8HAkCf,OACE,yBAAKN,UAAU,sBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAMP,cAAegC,KAAKd,iBAC1B,kBAAC,EAAD,CACEP,KAAMqB,KAAKhB,MAAML,KACjBL,KAAM0B,KAAKhB,MAAMV,KACjBE,QAASwB,KAAKhB,MAAMR,QACpBI,SAAUoB,KAAKhB,MAAMJ,SACrBC,MAAOmB,KAAKhB,MAAMH,iB,GA1DlBoB,IAAMC,W,MCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.6344167f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Info = () => (\n    <div>\n   <h2> What Is the Weather in Your City? </h2>\n    </div>\n  )\n\n export default Info;\n","import React from 'react';\n\nconst Form = props => (\n    <form onSubmit={props.weatherMethod}>\n   <input type='text' name='city' placeholder='City' required/>\n   <button> Search </button>\n    \n    </form>\n  )\n\n export default Form;\n\n//Вместо проверки на ввод города, легче просто в инпуте указать атрибут required","import React from \"react\";\n\n//Почитай про spread-операторы и впредь используй их, приучая юзеров использовать es6. Потому что то, что ты сделал в 7 строк делается строкой {...state}\n//<Weather {...state} />\n\nconst Weather = props => (\n  <div>\n    {props.city && (\n      <div className=\"infoWeath\">\n        <p>\n          {\" \"}\n          City: {props.city}, {props.country}\n        </p>\n        <p> Temperature: {Math.floor(props.temp)}°C</p>\n        <p> Pressure: {props.pressure}hPa</p>\n        <p> It's a nice day today, isn't it?</p>\n      </div>\n    )}\n    <p className=\"error\">{props.error}</p>\n  </div>\n);\nexport default Weather;\n","import React from \"react\";\nimport \"./App.css\";\nimport Info from \"./components/Info\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport \"./index.css\";\n\nconst API_KEY = \"9db0b3a62f147c8f911dac7c0d7e5615\";\n\nclass App extends React.Component {\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    error: undefined\n  };\n\n  gettingWeather = async(e) => {\n    e.preventDefault();\n    var city = e.target.elements.city.value;\n\n    if (city) {\n      const api_url = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`\n      );\n      const data = await api_url.json();\n\n      /*var sunset = data.sys.sunset;\n      var date = new Date();\n      date.setTime(sunset);\n      var clouds_date =\n        date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();*/\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        error: \"Please enter your city\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"wrapper topWrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info />\n              </div>\n              <div className=\"col-sm-7 form\">\n                <Form weatherMethod={this.gettingWeather} />\n                <Weather\n                  temp={this.state.temp}\n                  city={this.state.city}\n                  country={this.state.country}\n                  pressure={this.state.pressure}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./App.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}